{
	"info": {
		"_postman_id": "e1e775f1-5235-4c79-9ffe-b7a15a421111",
		"name": "Brand",
		"description": "Colección completa para gestionar operaciones CRUD de marcas",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "46088121",
		"_collection_link": "https://alejo-1102370.postman.co/workspace/Alejo's-Workspace~95493e77-2b6e-4057-84a3-d3ca0449bffe/collection/46088121-e1e775f1-5235-4c79-9ffe-b7a15a421111?action=share&source=collection_link&creator=46088121"
	},
	"item": [
		{
			"name": "Pruebas de error",
			"item": [
				{
					"name": "POST - Crear con nombre inválido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function() {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error message\", function() {",
									"    pm.expect(pm.response.text()).to.include(\"El nombre de la marca no es válido\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"\",\n  \"logoURL\": \"https://ejemplo.com/logo.png\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/brands",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"brands"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Obtener marca inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function() {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error message\", function() {",
									"    pm.expect(pm.response.text()).to.include(\"Marca con ID 999999 no encontrada\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/brands/999999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"brands",
								"999999"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "POST - Crear nueva marca",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function() {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response has valid structure\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData).to.have.property('logoURL');",
							"    pm.expect(jsonData).to.have.property('exclusiveProductIds');",
							"    pm.collectionVariables.set(\"brand_id\", jsonData.id);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"strictSSL": false,
				"protocolVersion": "auto"
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Nueva Marca\",\n  \"logoURL\": \"https://ejemplo.com/logo.png\",\n  \"exclusiveProductIds\": []\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/brands",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"brands"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET - Obtener todas las marcas",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is array\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"    pm.expect(jsonData.length).to.be.greaterThan(0);",
							"});",
							"",
							"pm.test(\"Items have detail structure\", function() {",
							"    var firstItem = pm.response.json()[0];",
							"    pm.expect(firstItem).to.have.property('id');",
							"    pm.expect(firstItem).to.have.property('name');",
							"    pm.expect(firstItem).to.have.property('logoURL');",
							"    pm.expect(firstItem).to.have.property('exclusiveProducts');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/brands",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"brands"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET - Obtener marca por ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response matches requested ID\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).to.eql(Number(pm.collectionVariables.get(\"brand_id\")));",
							"});",
							"",
							"pm.test(\"Has detailed structure\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('exclusiveProducts');",
							"    pm.expect(jsonData.exclusiveProducts).to.be.an('array');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/brands/{{brand_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"brands",
						"{{brand_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT - Actualizar marca existente",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Verify updated fields\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.eql(\"Marca Actualizada\");",
							"    pm.expect(jsonData.logoURL).to.eql(\"https://nuevo-ejemplo.com/logo-actualizado.png\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Marca Actualizada\",\n  \"logoURL\": \"https://nuevo-ejemplo.com/logo-actualizado.png\",\n  \"exclusiveProductIds\": []\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/brands/{{brand_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"brands",
						"{{brand_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE - Eliminar marca",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function() {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/brands/{{brand_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"brands",
						"{{brand_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "OPTIONS - Preflight request",
			"request": {
				"method": "OPTIONS",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/brands",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"brands"
					]
				}
			},
			"response": []
		},
		{
			"name": "HEAD - Verificar existencia endpoint",
			"request": {
				"method": "HEAD",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/brands",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"brands"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "brand_id",
			"value": "",
			"type": "string"
		}
	]
}